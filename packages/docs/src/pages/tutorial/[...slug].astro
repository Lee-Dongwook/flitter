---
import SandPack from "./SandPack.tsx";
import Layout from "../../layouts/TutorialLayout.astro";
import { getCollection } from "astro:content";
import TableOfContents from "./TableOfContents.astro";

export const prerender = true;

export const getStaticPaths = async () => {
  const tutorialEntries = await getCollection("tutorial");

  function resolveSlug(slug: string) {
    const segments = slug.split("/");
    const cleanedSegments = segments.map((segment) =>
      segment.replace(/^\d+_/, ""),
    );
    return cleanedSegments.join("/");
  }

  return tutorialEntries
    .map((entry) => ({
      ...entry,
      slug: resolveSlug(entry.slug),
      lang: entry.slug.split("/")[0], // 언어 정보 추출
    }))
    .map((entry, i, arr) => ({
      params: {
        slug: entry.slug,
      },
      props: {
        prev: arr[i - 1],
        next: arr[i + 1],
        entry,
        lang: entry.lang,
      },
    }));
};

const { entry, prev, next } = Astro.props;

const { Content } = await entry.render();
---

<Layout
  title={`${entry.data.nav_group}/${entry.data.title} - Flitter`}
  description={entry.data.description}
  image={entry.data.image ?? "/og-tutorial.png"}
>
  <div
    class="grid h-[calc(100vh-var(--header))] grid-cols-1 lg:grid-cols-[220px_1fr_1fr] dark:bg-white"
    id="mainContainer"
  >
    <div class="lg:hidden fixed bottom-4 right-4 z-50">
      <button
        id="mobileMenuBtn"
        class="bg-pink-500 text-white p-3 rounded-full shadow-lg"
        aria-label="Toggle mobile menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
        </svg>
      </button>
    </div>
    
    <aside class="fixed inset-0 z-40 transform -translate-x-full transition-transform duration-300 lg:relative lg:translate-x-0 lg:h-full lg:overflow-scroll lg:border-r lg:border-gray-600/30 bg-[#151515] dark:bg-white" id="sidebar">
      <div
        class="absolute -right-1 top-0 h-full w-2 cursor-col-resize hover:bg-blue-500/20 hidden lg:block"
        id="tocResizer"
      >
      </div>
      <TableOfContents currentSlug={entry.slug.replace(/^\d+_/, "")} />
    </aside>

    <div class="w-full overflow-auto col-span-2 lg:col-span-1">
      <nav
        class="sticky top-0 flex h-[60px] items-center justify-between border-b border-gray-600/30 px-6 backdrop-blur"
      >
        <div class="flex items-center gap-2">
          {
            prev && (
              <a
                href={`/tutorial/${prev.slug}`}
                class="flex h-10 w-10 items-center justify-center rounded text-gray-300 transition-colors hover:bg-gray-800 hover:text-white dark:text-black"
                title={prev.data.title}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 19l-7-7 7-7"
                  />
                </svg>
              </a>
            )
          }
          {
            next && (
              <a
                href={`/tutorial/${next.slug}`}
                class="flex h-10 w-10 items-center justify-center rounded text-gray-300 transition-colors hover:bg-gray-800 hover:text-white dark:text-black"
                title={next.data.title}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 5l7 7-7 7"
                  />
                </svg>
              </a>
            )
          }
        </div>
        <div class="flex items-center gap-2">
          <button
            id="solvedButton"
            class="rounded bg-gray-800 px-4 py-2 text-sm font-medium text-gray-100 transition-colors hover:bg-gray-700"
          >
            Show Solution
          </button>
        </div>
      </nav>
      <div class="prose prose-invert prose-modern max-w-none p-8">
        <Content />
      </div>
    </div>

    <div id="sandpackContainer" class="w-full overflow-auto bg-[#151515] hidden lg:block">
      <div id="originalSandpack" class="h-full">
        <SandPack files={entry.data.files} client:only="react" />
      </div>
      <div id="solvedSandpack" class="hidden h-full">
        <SandPack
          files={entry.data.solved_files ?? entry.data.files}
          client:only="react"
        />
      </div>
    </div>
  </div>

  <div class="lg:hidden fixed bottom-20 right-4 z-50">
    <button
      id="sandpackToggle"
      class="bg-blue-500 text-white p-3 rounded-full shadow-lg"
      aria-label="Toggle Sandpack"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
      </svg>
    </button>
  </div>

<script>
  let showingMenu = false;
  let showingSandpack = false;
  const mobileMenuBtn = document.getElementById('mobileMenuBtn')!;
  const sandpackToggle = document.getElementById('sandpackToggle')!;
  const sidebar = document.getElementById('sidebar')!;
  const sandpackContainer = document.getElementById('sandpackContainer')!;
  const mainContainer = document.getElementById('mainContainer')!;

  function toggleMenu() {
    showingMenu = !showingMenu;
    
    if (showingMenu) {
      sidebar.classList.add('translate-x-0');
      const overlay = document.createElement('div');
      overlay.className = 'fixed inset-0 bg-black/50 z-35';
      overlay.addEventListener('click', toggleMenu);
      mainContainer.appendChild(overlay);
    } else {
      sidebar.classList.remove('translate-x-0');
      const overlay = document.querySelector('.fixed.inset-0.bg-black\\/50');
      if (overlay) overlay.remove();
    }
  }

  function toggleSandpack() {
    showingSandpack = !showingSandpack;
    
    if (showingSandpack) {
      sandpackContainer.classList.remove('hidden');
      sandpackContainer.classList.add('fixed', 'inset-0', 'z-40');
      const closeBtn = document.createElement('button');
      closeBtn.className = 'absolute top-4 right-4 text-white p-2 rounded-full bg-gray-800';
      closeBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>';
      closeBtn.addEventListener('click', toggleSandpack);
      sandpackContainer.appendChild(closeBtn);
    } else {
      sandpackContainer.classList.add('hidden');
      sandpackContainer.classList.remove('fixed', 'inset-0', 'z-40');
      const closeBtn = sandpackContainer.querySelector('button');
      if (closeBtn) closeBtn.remove();
    }
  }

  mobileMenuBtn?.addEventListener('click', toggleMenu);
  sandpackToggle?.addEventListener('click', toggleSandpack);
</script>

<script>
  // Toggle solution button logic
  document.getElementById("solvedButton")?.addEventListener("click", () => {
    const button = document.getElementById("solvedButton")!;
    const originalSandpack = document.getElementById("originalSandpack");
    const solvedSandpack = document.getElementById("solvedSandpack");

    if (button?.classList.contains("solved")) {
      originalSandpack?.classList.remove("hidden");
      solvedSandpack?.classList.add("hidden");
      button.classList.remove("solved");
      button.classList.remove("bg-blue-500");
      button.classList.add("bg-green-500");
      button.textContent = "Show Solution";
    } else {
      originalSandpack?.classList.add("hidden");
      solvedSandpack?.classList.remove("hidden");
      button.classList.add("solved");
      button.classList.remove("bg-green-500");
      button.classList.add("bg-blue-500");
      button.textContent = "Hide Solution";
    }
  });

  // TOC Resizer logic
  const resizer = document.getElementById("tocResizer");
  const sidebar = resizer?.parentElement;
  const container = sidebar?.parentElement;

  let isResizing = false;
  let startX: number;
  let startWidth: number;

  resizer?.addEventListener("mousedown", initResize);

  function initResize(e: MouseEvent) {
    isResizing = true;
    startX = e.clientX;
    startWidth = sidebar?.offsetWidth || 0;

    document.addEventListener("mousemove", resize);
    document.addEventListener("mouseup", stopResize);
    document.body.style.userSelect = "none";
    document.body.style.cursor = "col-resize";
  }

  function resize(e: MouseEvent) {
    if (!isResizing) return;

    const diff = e.clientX - startX;
    const newWidth = startWidth + diff;

    if (newWidth >= 160 && newWidth <= 400) {
      container?.style.setProperty(
        "grid-template-columns",
        `${newWidth}px 1fr 1fr`,
      );
    }
  }

  function stopResize() {
    isResizing = false;
    document.removeEventListener("mousemove", resize);
    document.removeEventListener("mouseup", stopResize);
    document.body.style.userSelect = "";
    document.body.style.cursor = "";
  }
</script>

<style is:global>
  .sp-preview-container html,
  .sp-preview-container body {
    height: 100%;
    margin: 0;
    padding: 0;
  }
</style>

<style>
  #tocResizer {
    transition: background-color 0.2s;
    z-index: 10;
  }
  #tocResizer:active {
    background-color: rgb(59 130 246 / 0.2);
  }
</style>

<style>
  @media (max-width: 1024px) {
    .overlay {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.5);
      z-index: 35;
    }
  }
</style>
